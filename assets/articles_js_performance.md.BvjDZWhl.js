import{_ as i,c as l,o as t,a2 as s}from"./chunks/framework.BPg1USI6.js";const S=JSON.parse('{"title":"十三、性能","description":"","frontmatter":{},"headers":[],"relativePath":"articles/js/performance.md","filePath":"articles/js/performance.md","lastUpdated":1709538010000}'),n={name:"articles/js/performance.md"},o=s('<h1 id="十三、性能" tabindex="-1">十三、性能 <a class="header-anchor" href="#十三、性能" aria-label="Permalink to &quot;十三、性能&quot;">​</a></h1><h2 id="前段性能优化手段" tabindex="-1">前段性能优化手段 <a class="header-anchor" href="#前段性能优化手段" aria-label="Permalink to &quot;前段性能优化手段&quot;">​</a></h2><p>前端性能优化手段从以下几个方面入手：<strong>加载优化</strong>、<strong>执行优化</strong>、<strong>渲染优化</strong>、<strong>样式优化</strong>、<strong>脚本优化</strong></p><p><strong>加载优化</strong>:减少HTTP请求、缓存资源、压缩代码、无阻塞、首屏加载、按需加载、预加载、压缩图像、减少Cookie、避免重定向、异步加载第三方资源 <strong>执行优化</strong>：CSS写在头部，JS写在尾部并异步、避免img、iframe等的src为空、尽量避免重置图像大小、图像尽量避免使用DataURL <strong>渲染优化</strong>：设置viewport、减少DOM节点、优化动画、优化高频事件、GPU加速 <strong>样式优化</strong>：避免在HTML中书写style、避免CSS表达式、移除CSS空规则、正确使用display：display、不滥用float等 <strong>脚本优化</strong>：减少重绘和回流、缓存DOM选择与计算、缓存.length的值、尽量使用事件代理、尽量使用id选择器、touch事件优化 <strong>加载优化</strong></p><ul><li><p>减少HTTP请求：尽量减少页面的请求数(首次加载同时请求数不能超过4个)，移动设备浏览器同时响应请求为4个请求(Android支持4个，iOS5+支持6个)</p><ul><li>合并CSS和JS</li><li>使用CSS精灵图</li></ul></li><li><p>缓存资源：使用缓存可减少向服务器的请求数，节省加载时间，所有静态资源都要在服务器端设置缓存，并且尽量使用长缓存(使用时间戳更新缓存)</p><ul><li>缓存一切可缓存的资源</li><li>使用长缓存</li><li>使用外联的样式和脚本</li></ul></li><li><p>压缩代码：减少资源大小可加快网页显示速度，对代码进行压缩，并在服务器端设置GZip</p><ul><li>压缩代码(多余的缩进、空格和换行符)</li><li>启用Gzip</li></ul></li><li><p>无阻塞：头部内联的样式和脚本会阻塞页面的渲染，样式放在头部并使用link方式引入，脚本放在尾部并使用异步方式加载</p></li><li><p>首屏加载：首屏快速显示可大大提升用户对页面速度的感知，应尽量针对首屏的快速显示做优化</p></li><li><p>按需加载：将不影响首屏的资源和当前屏幕不用的资源放到用户需要时才加载，可大大提升显示速度和降低总体流量(按需加载会导致大量重绘，影响渲染性能)</p><ul><li>懒加载</li><li>滚屏加载</li><li>Media Query加载</li></ul></li><li><p>预加载：大型资源页面可使用Loading，资源加载完成后再显示页面，但加载时间过长，会造成用户流失</p><ul><li>可感知Loading：进入页面时Loading</li><li>不可感知Loading：提前加载下一页</li></ul></li><li><p>压缩图像：使用图像时选择最合适的格式和大小，然后使用工具压缩，同时在代码中用srcset来按需显示(</p><p>过度压缩图像大小影响图像显示效果)</p><ul><li>使用<a href="https://tinyjpg.com/" target="_blank" rel="noreferrer">TinyJpg</a>和<a href="https://tinypng.com/" target="_blank" rel="noreferrer">TinyPng</a>压缩图像</li><li>使用CSS3、SVG、IconFont代替图像</li><li>使用img的srcset按需加载图像</li><li>选择合适的图像：webp优于jpg，png8优于gif</li><li>选择合适的大小：首次加载不大于1014kb、不宽于640px</li><li>PS切图时D端图像保存质量为80，M端图像保存质量为60</li></ul></li><li><p>减少Cookie：Cookie会影响加载速度，静态资源域名不使用Cookie</p></li><li><p>避免重定向：重定向会影响加载速度，在服务器正确设置避免重定向</p></li><li><p>异步加载第三方资源：第三方资源不可控会影响页面的加载和显示，要异步加载第三方资源 <strong>执行优化</strong></p></li><li><p><strong>CSS写在头部，JS写在尾部并异步</strong></p></li><li><p><strong>避免img、iframe等的src为空</strong>：空src会重新加载当前页面，影响速度和效率</p></li><li><p><strong>尽量避免重置图像大小</strong>：多次重置图像大小会引发图像的多次重绘，影响性能</p></li><li><p><strong>图像尽量避免使用DataURL</strong>：DataURL图像没有使用图像的压缩算法，文件会变大，并且要解码后再渲染，加载慢耗时长 <strong>渲染优化</strong></p></li><li><p><strong>设置viewport</strong>：HTML的viewport可加速页面的渲染</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewport&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width=device-width, user-scalable=no, initial-scale=1, minimum-scale=1, maximum-scale=1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><p><strong>减少DOM节点</strong>：DOM节点太多影响页面的渲染，尽量减少DOM节点</p></li><li><p><strong>优化动画</strong></p><ul><li>尽量使用CSS3动画</li><li>合理使用requestAnimationFrame动画代替setTimeout</li><li>适当使用Canvas动画：5个元素以内使用CSS动画，5个元素以上使用Canvas动画，iOS8+可使用WebGL动画</li></ul></li><li><p><strong>优化高频事件</strong>：scroll、touchmove等事件可导致多次渲染</p><ul><li>函数节流</li><li>函数防抖</li><li>使用requestAnimationFrame监听帧变化：使得在正确的时间进行渲染</li><li>增加响应变化的时间间隔：减少重绘次数</li></ul></li><li><p><strong>GPU加速</strong>：使用某些HTML5标签和CSS3属性会触发GPU渲染，请合理使用(<strong>过渡使用会引发手机耗电量增加</strong>)</p><ul><li>HTML标签：video、canvas、webgl</li><li>CSS属性：opacity、transform、transition <strong>样式优化</strong></li></ul></li><li><p><strong>避免在HTML中书写style</strong></p></li><li><p><strong>避免CSS表达式</strong>：CSS表达式的执行需跳出CSS树的渲染</p></li><li><p><strong>移除CSS空规则</strong>：CSS空规则增加了css文件的大小，影响CSS树的执行</p></li><li><p>正确使用display：display会影响页面的渲染</p><ul><li>display:inline后不应该再使用float、margin、padding、width和height</li><li>display:inline-block后不应该再使用float</li><li>display:block后不应该再使用vertical-align</li><li>display:table-*后不应该再使用float和margin</li></ul></li><li><p><strong>不滥用float</strong>：float在渲染时计算量比较大，尽量减少使用</p></li><li><p><strong>不滥用Web字体</strong>：Web字体需要下载、解析、重绘当前页面，尽量减少使用</p></li><li><p><strong>不声明过多的font-size</strong>：过多的font-size影响CSS树的效率</p></li><li><p><strong>值为0时不需要任何单位</strong>：为了浏览器的兼容性和性能，值为0时不要带单位</p></li><li><p>标准化各种浏览器前缀</p><ul><li>无前缀属性应放在最后</li><li>CSS动画属性只用-webkit-、无前缀两种</li><li>其它前缀为-webkit-、-moz-、-ms-、无前缀四种：Opera改用blink内核，-o-已淘汰</li></ul></li><li><p><strong>避免让选择符看起来像正则表达式</strong>：高级选择符执行耗时长且不易读懂，避免使用 <strong>脚本优化</strong></p></li><li><p>减少重绘和回流</p><ul><li>避免不必要的DOM操作</li><li>避免使用document.write</li><li>减少drawImage</li><li>尽量改变class而不是style，使用classList代替className</li></ul></li><li><p><strong>缓存DOM选择与计算</strong>：每次DOM选择都要计算和缓存</p></li><li><p><strong>缓存.length的值</strong>：每次.length计算用一个变量保存值</p></li><li><p><strong>尽量使用事件代理</strong>：避免批量绑定事件</p></li><li><p><strong>尽量使用id选择器</strong>：id选择器选择元素是最快的</p></li><li><p><strong>touch事件优化</strong>：使用tap(touchstart和touchend)代替click(<strong>注意touch响应过快，易引发误操作</strong>)</p></li></ul>',7),r=[o];function a(e,p,g,c,h,d){return t(),l("div",null,r)}const k=i(n,[["render",a]]);export{S as __pageData,k as default};
