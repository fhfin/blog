import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.BPg1USI6.js";const E=JSON.parse('{"title":"文件引入方式","description":"","frontmatter":{},"headers":[],"relativePath":"articles/js/fileImport.md","filePath":"articles/js/fileImport.md","lastUpdated":1709538010000}'),e={name:"articles/js/fileImport.md"},p=t(`<h1 id="文件引入方式" tabindex="-1">文件引入方式 <a class="header-anchor" href="#文件引入方式" aria-label="Permalink to &quot;文件引入方式&quot;">​</a></h1><h2 id="link和-import" tabindex="-1">link和@import <a class="header-anchor" href="#link和-import" aria-label="Permalink to &quot;link和@import&quot;">​</a></h2><p>作用：样式的导入方式</p><p>link的使用</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>@import的使用</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@import url(index.css);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>区别：</p><ol><li><p>引入的内容不同</p><p>link除了引用样式文件，还可以引用图片等资源文件，而@import只引用样式文件</p></li><li><p>加载顺序不同</p><p>link引用css时，在页面载入时同时加载；@import需要页面网页完全载入以后加载</p></li><li><p>兼容性不同</p><p>link是XHTML标签，无兼容性问题；@import是在css2.1提出的，低版本的浏览器不支持</p></li><li><p>对js的支持不同</p><p>link支持使用JavaScript控制DOM去改变样式；而@import不支持</p></li></ol><h2 id="为什么link用href获取资源-script和img用src" tabindex="-1">为什么link用href获取资源，script和img用src? <a class="header-anchor" href="#为什么link用href获取资源-script和img用src" aria-label="Permalink to &quot;为什么link用href获取资源，script和img用src?&quot;">​</a></h2><h3 id="src用于替换当前元素-href用于在当前文档和引用资源之间确立联系" tabindex="-1">src用于替换当前元素，href用于在当前文档和引用资源之间确立联系 <a class="header-anchor" href="#src用于替换当前元素-href用于在当前文档和引用资源之间确立联系" aria-label="Permalink to &quot;src用于替换当前元素，href用于在当前文档和引用资源之间确立联系&quot;">​</a></h3><p>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;js.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，这也是为什么将js脚本放在底部而不是头部</p><h3 id="href是hypertext-reference的缩写-指向网络资源所在位置-建立和当前元素-锚点-或当前文档-链接-之间的链接" tabindex="-1">href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接 <a class="header-anchor" href="#href是hypertext-reference的缩写-指向网络资源所在位置-建立和当前元素-锚点-或当前文档-链接-之间的链接" aria-label="Permalink to &quot;href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接&quot;">​</a></h3><p>在文档中添加link标签，浏览器会识别该文档为css文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是@import方式</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common.css&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylesheet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div>`,17),l=[p];function h(n,r,k,c,o,d){return a(),i("div",null,l)}const y=s(e,[["render",h]]);export{E as __pageData,y as default};
